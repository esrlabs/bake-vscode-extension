[
    {
        "key": "Project",
        "mandatory": "Yes",
        "quantity": "1",
        "default": "-",
        "description": "A bake project is very similiar to a project in Eclipse, Visual Studio, etc. The name of the project is the directory name of the Project.meta file."
    },
    {
        "key": "default",
        "mandatory": "No",
        "quantity": "-",
        "default": "-",
        "description": "Default configuration which is used if not explicitly specified on command line or Dependency definition.\n\nExamples:  \n\\#Project.meta:  \n'Dependency canDriver \\# uses default config of canDriver project  \n\\# Command line:  \nbake -m folder/dir/projABC \\# builds default config of project projABC"
    },
    {
        "key": "Description",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "Description of the project or config."
    },
    {
        "key": "RequiredBakeVersion",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "If specified, the build will be aborted if bake version is lower than mininum or greater than maximum.  \nIt is possible to define only minimum, only maximim or both version thresholds.  \nMinor and patch version numbers are optional."
    },
    {
        "key": "Responsible",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "Specify all responsible persons of the project."
    },
    {
        "key": "Person",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "Person who is responsible for the project."
    },
    {
        "key": "email",
        "mandatory": "No",
        "quantity": "-",
        "default": "-",
        "description": "Use always double quotes (\") for the email address."
    },
    {
        "key": "ExecutableConfig",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "This is usually the main config of an application."
    },
    {
        "key": "LibraryConfig",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "This config is used for a source library. The library will be linked automatically to the executable."
    },
    {
        "key": "CustomConfig",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "This config is used for special projects, e.g. for Makefile projects. It is valid to leave a CustomConfig completely empty - nothing will be done in that case."
    },
    {
        "key": "extends",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "Inherit settings from parent config(s). For more information see docu page 'Derive configs'."
    },
    {
        "key": "mergeInc",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "If set to \"no\", the IncludeDirs will NEVER be merged.  \nIf set to \"yes\", inherited IncludeDirs will merged when compiling this config (except for IncludeDirs which configs have mergeInc \"no\".  \nIf set to \"all\", all IncludeDirs will merged when compiling this config (except for IncludeDirs which configs have mergeInc \"no\".  \nIf unset, IncludeDirs will not be merged when compiling this config."
    },
    {
        "key": "private",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "false",
        "description": "If true, the config cannot be referenced directly outside of this project."
    },
    {
        "key": "IncludeDir",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "If true, the config cannot be referenced directly outside of this project."
    },
    {
        "key": "inherit",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "false",
        "description": "Specifies the include directories for the assembler, C and C++ compiler.  \nUse always relative paths, not absolute paths due to portability.  \n\nUse always \"/\" and not \"\\\" \n\nIt is possible to work with different workspace roots. Do not include something like this:  \nIncludeDir \"../abc/include\"  \nbut  \nIncludeDir \"abc/include\"  \nbecause it may happen, that abc does not exist in the same root as the current project. The path to abc will be calculated automatically.  \n\nTo include directories of the current project, the project name can be omitted like this:  \nIncludeDir \"include\"  \nIncludeDir \"generated/include\""
    },
    {
        "key": "inject",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "Injects the include path to all childs, either at the front (e.g. for mocking code) or at the end."
    },
    {
        "key": "system",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "If supported from the compiler, the system include flag will be used instead of the normal include flag.  \nExample: in gcc \"-isystem\" instead of \"-I\" is used.  \nNote: system include definition overrules normal include definition if both are defined."
    },
    {
        "key": "Set",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "Sets a variable for this and all dependent projects.  \nThe variable can be a simple value or the result of a cmd, e.g. \"cat myVar.txt\"."
    },
    {
        "key": "env",
        "mandatory": "No",
        "quantity": "-",
        "default": "false",
        "description": "Stores the variable also in system environment, which makes it available in everything which is executed by bake, e.g. in Pre- and PostSteps."
    },
    {
        "key": "Dependency",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "Specifies another project to be built before this project.  \nThe archive, linker libs and search paths are imported from this project to the this project automatically.  \nIf you omit the project, the current project will be used.  \nIf you omit the config name, the default config will be used.  \nExamples:  \nDependency gtest, config: lib  \nDependency \"my/folder/proj\""
    },
    {
        "key": "config",
        "mandatory": "Yes",
        "quantity": "-",
        "default": "-",
        "description": "Config name of the project to build."
    },
    {
        "key": "ExternalLibrary",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "Every config can specify libs which have to be linked to the executable.  \nIt's possible to add a path, e.g.:  \nExternalLibrary \"xy/z/ab\"  \nIn this case the lib \"ab\" is added to the linker command line as well as the lib search path \"xy/z\"  \nNote, that the linker will look for \"libab.a\""
    },
    {
        "key": "search",
        "mandatory": "No",
        "quantity": "-",
        "default": "true",
        "description": "If the attribute \"search: false\" is specified, the lib will not be searched but linked with the full name, e.g.  \nExternalLibrary \"xy/z/libpq.a\", search: false  \nwill link \"xy/z/libpq.a\" to the executable.  \nIt is also possible to specify an object file when using \"search: false\"."
    },
    {
        "key": "UserLibrary",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "A user library will be linked _before_ any other libraries or objects to the executable.  \nIt is also possible to specify an object file.  \nThe library will be searched like an ExternalLibrary, but with the full name, e.g.  \nUserLibrary \"xy/z/libUser.a\"  \nUserLibrary \"xy/z/something.o\"  \nwill link \"libUser.a\" and \"something.o\" before regular objects and libraries.  \n\"xy/z\" will be added as an ExternalLibrarySearchPath."
    },
    {
        "key": "ExternalLibrarySearchPath",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "The linker looks for libraries in search paths.  \nSearch paths can be defined implicitly by ExternalLibrary/UserLibrary or explicitly by this tag."
    },
    {
        "key": "PreSteps",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "PreSteps are executed before compiling files of the project.  \nThe number of steps are not limited.  \nIf a step fails, all further steps of the project will be skipped."
    },
    {
        "key": "PostSteps",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "PostSteps are executed after the main task of the project, e.g. linking an executable.  \nThe number of steps are not limited.  \nIf a step fails, all further steps of the project will be skipped."
    },
    {
        "key": "StartupSteps",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "StartupSteps of ALL projects are executed before building the first project.  \nThe number of steps are not limited."
    },
    {
        "key": "ExitSteps",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "ExitSteps of ALL projects are executed after building complete workspace even if the build has failed.  \nThe number of steps are not limited."
    },
    {
        "key": "CleanSteps",
        "mandatory": "No",
        "quantity": "0..1",
        "default": "-",
        "description": "CleanSteps are executed when calling bake with \"-c\" or \"--rebuild\".  \nThe number of steps are not limited.  \nIf a step fails, all further steps will be skipped."
    },
    {
        "key": "Makefile",
        "mandatory": "No",
        "quantity": "0..n",
        "default": "-",
        "description": "Makefile to be started, e.g.:  \n> Makefile \"subDir/makefile\"\n\nBefore executing the makefile, bake sets the environment variables  \n> $(BAKE_XX_COMMAND) and $(BAKE_XX_FLAGS),\n\nwhereas XX is one of  \n> CPP, C, ASM, AR or LD."
    }
]